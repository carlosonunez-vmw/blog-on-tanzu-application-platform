apiVersion: carto.run/v1alpha1
kind: ClusterSupplyChain
metadata:
  name: publish-blog
spec:
  # selectors allow you to specify labels that Workloads can use to
  # select this supply chain with.
  selector:
    is-blog: "true"
  # resources are the objects that Cartographer will create to release this blog.
  resources:
    # The first thing we're going to do is "initialize" the blog that we're
    # generating. This initialization step validates inputs from our Workload
    # and generates a config that we can use for other steps in the pipeline.
    #
    # The alternative is to sprinkle references to Workload and Supply Chain
    # parameters throughout each Supply Chain resource, which is less
    # discoverable and more brittle.
    - name: config
      # `params` in a Supply Chain are a good place to put defaults
      # that you'll supply to templates you'll use throughout the Chain.
      #
      # Since most params that you'll care about will come from Workloads,
      # you'll mostly use the `${spec.workload.params}` template value
      # within your templates instead.
      #
      # It would be cool if we could declare them here to enforce a schema
      # of some kind, but, alas, that's not a thing yet.
      params:
        - name: default_blog_gen_url
          value: http://github.com/carlosonunez/https-hugo-bloggen
        - name: default_blog_gen_version
          value: v2.2.1
        - name: default_blog_gen_registry
          value: docker.io
        - name: default_blog_registry_secret
          value: blog-registry-secret
        - name: default_blog_ref
          value: main
      templateRef:
        kind: ClusterConfigTemplate
        name: blog-config
      # Once our configuration has been generated, we're going to "render"
      # the blog with a ClusterImageTemplate.
      #
      # This will fetch the blog's source code from the URL specified in the
      # Workload as well as blog-gen, use blog-gen to render the blog's pages
      # and static assets and compress everything into an OCI image
      # (i.e. a glorified tarball).
      #
      # The ClusterImageTemplate will churn out the image's URL and
      # revision (i.e. the blog's most recent commit SHA) so that
      # we can create actual Kubernetes resources later in the supply chain
      # and make it available online.
    - name: image
      configs:
        - name: config
          resource: config
      templateRef:
        name: blog-renderer
        kind: ClusterImageTemplate
#    - name: Test the Blog
#    - name: Release the Blog
